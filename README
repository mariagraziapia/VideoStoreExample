VideoStore Refactoring Example
------------------------------

The following is an excerpt from: M. Fowler, Refactoring, Addison-Wesley 
Professional, 1999.

I can now do the same procedure with getFrequentRenterPoints. 

In this case however, I don't make the superclass method pure
virtual. Instead, I create an overriding method for the new releases
and leave a defined method (as the default) on the superclass.

Putting in the state pattern was quite an effort. Was it worth it? The
gain is that if I change any price's behavior, add new prices, or add
extra price-dependent behavior, the change will be much easier to
make. The rest of the application does not know about the use of the
state pattern. For the tiny amout of behavior I currently have, it is
not a big deal. In a more complex system with a dozen or so
price-dependent methods, this would make a big difference. All these
changes were small steps. It seems slow to write it this way, but not
once did I have to open the debugger, so the process actually flowed
quite quickly. It took me much longer to write this section of the
book than it did to change the code.

I've now completed the second major refactoring.