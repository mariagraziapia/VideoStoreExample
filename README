VideoStore Refactoring Example
------------------------------

The following is an excerpt from: M. Fowler, Refactoring, Addison-Wesley 
Professional, 1999.

Replacing the Conditional Logic on Price Code with Polymorphism

The first part of this problem is that switch statement. It is a bad
idea to do a switch based on and attribute of another object. If you
must use a switch statement, it should be on your own data, not on
someone else's.

This implies that getCharge should move onto movie.

For this to work I had to pass in the length of the rental, which of
course is data from the rental. The method effectively uses two pieces
of data, the length of the rental and the type of the movie. Why do I
prefer to pass the length of the rental to the movie rather than the
movie type to the rental? It's because the proposed changes are all
about adding new types. Type information generally tends to be more
volatile. If I change the movie type, I want the least ripple effect,
so I prefer to calculate the charge within the movie.

I compiled the method into movie and then changed the getCharge on
rental to use the new method.